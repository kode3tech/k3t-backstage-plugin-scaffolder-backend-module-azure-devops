export interface AzureRepositoryKey {
  organization: string;
  project: string;
  repository: string;
}

// Generated by https://quicktype.io

export interface AzureRepositoryInfo {
  id: string;
  name: string;
  url: string;
  project: Project;
  defaultBranch: string;
  size: number;
  remoteUrl: string;
  sshUrl: string;
  webUrl: string;
  _links: Links;
  isDisabled: boolean;
}

export interface Links {
  self: Commits;
  project: Commits;
  web: Commits;
  ssh: Commits;
  commits: Commits;
  refs: Commits;
  pullRequests: Commits;
  items: Commits;
  pushes: Commits;
}

export interface Commits {
  href: string;
}

export interface Project {
  id: string;
  name: string;
  description: string;
  url: string;
  state: string;
  revision: number;
  visibility: string;
  lastUpdateTime: string;
}

// Generated by https://quicktype.io

export interface AzureRepositoryPush {
  commits: AzureRepositoryPushCommit[];
  refUpdates: AzureRepositoryPushRefUpdate[];
}

export interface AzureRepositoryPushCommit {
  changes: AzureRepositoryPushChange[];
  comment: string;
}

export interface AzureRepositoryPushChange {
  changeType: number;
  item: AzureRepositoryPushItem;
  newContent: AzureRepositoryPushNewContent;
}

export interface AzureRepositoryPushItem {
  path: string;
}

export interface AzureRepositoryPushNewContent {
  content: string;
  contentType: number;
}

export interface AzureRepositoryPushRefUpdate {
  name: string;
  oldObjectId: string;
}

// Generated by https://quicktype.io

export interface AzureRepositoryItem {
  objectId: string;
  gitObjectType: number;
  commitId: string;
  path: string;
  content: string;
  contentMetadata: AzureRepositoryItemContentMetadata;
  url: string;
  _links: AzureRepositoryItemLinks;
}

export interface AzureRepositoryItemLinks {
  self: AzureRepositoryItemBlob;
  repository: AzureRepositoryItemBlob;
  blob: AzureRepositoryItemBlob;
}

export interface AzureRepositoryItemBlob {
  href: string;
}

export interface AzureRepositoryItemContentMetadata {
  encoding: number;
  contentType: string;
  fileName: string;
  extension: string;
  vsLink: string;
}
